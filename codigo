import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

class Aluno implements Serializable {
    private String nome;
    private int id;
    private List<AgendamentoTreino> historicoTreinos = new ArrayList<>();
    private List<AgendamentoEquipamento> historicoEquipamentos = new ArrayList<>();

    public Aluno(String nome, int id) {
        this.nome = nome;
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public int getId() {
        return id;
    }

    public List<AgendamentoTreino> getHistoricoTreinos() {
        return historicoTreinos;
    }

    public List<AgendamentoEquipamento> getHistoricoEquipamentos() {
        return historicoEquipamentos;
    }

    public void adicionarTreino(AgendamentoTreino agendamentoTreino) {
        historicoTreinos.add(agendamentoTreino);
    }

    public void adicionarEquipamento(AgendamentoEquipamento agendamentoEquipamento) {
        historicoEquipamentos.add(agendamentoEquipamento);
    }

    @Override
    public String toString() {
        return "Aluno [nome=" + nome + ", id=" + id + "]";
    }
}

class Treino implements Serializable {
    private String nome;
    private String descricao;

    public Treino(String nome, String descricao) {
        this.nome = nome;
        this.descricao = descricao;
    }

    public String getNome() {
        return nome;
    }

    public String getDescricao() {
        return descricao;
    }

    @Override
    public String toString() {
        return "Treino [nome=" + nome + "]";
    }
}

class Equipamento implements Serializable {
    private String nome;
    private int id;

    public Equipamento(String nome, int id) {
        this.nome = nome;
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return "Equipamento [nome=" + nome + ", id=" + id + "]";
    }
}

class Instrutor implements Serializable {
    private String nome;
    private int id;

    public Instrutor(String nome, int id) {
        this.nome = nome;
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return "Instrutor [nome=" + nome + ", id=" + id + "]";
    }
}

class AgendamentoTreino implements Serializable {
    private Aluno aluno;
    private Treino treino;
    private Date data;
    private Instrutor instrutor;

    public AgendamentoTreino(Aluno aluno, Treino treino, Date data, Instrutor instrutor) {
        this.aluno = aluno;
        this.treino = treino;
        this.data = data;
        this.instrutor = instrutor;
    }

    public Aluno getAluno() {
        return aluno;
    }

    public Treino getTreino() {
        return treino;
    }

    public Date getData() {
        return data;
    }

    public Instrutor getInstrutor() {
        return instrutor;
    }

    @Override
    public String toString() {
        return "Agendamento de Treino [aluno=" + aluno.getNome() + ", treino=" + treino.getNome() + ", data=" + data + ", instrutor=" + instrutor.getNome() + "]";
    }
}

class AgendamentoEquipamento implements Serializable {
    private Aluno aluno;
    private Equipamento equipamento;
    private Date data;

    public AgendamentoEquipamento(Aluno aluno, Equipamento equipamento, Date data) {
        this.aluno = aluno;
        this.equipamento = equipamento;
        this.data = data;
    }

    public Aluno getAluno() {
        return aluno;
    }

    public Equipamento getEquipamento() {
        return equipamento;
    }

    public Date getData() {
        return data;
    }

    @Override
    public String toString() {
        return "Reserva de Equipamento [aluno=" + aluno.getNome() + ", equipamento=" + equipamento.getNome() + ", data=" + data + "]";
    }
}

class FileManager {
    public void registrarOperacao(String operacao, String nomeArquivo) {
        try {
            FileWriter writer = new FileWriter(nomeArquivo, true);
            writer.write(operacao + "\n");
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class SistemaAcademia {
    private List<Aluno> alunos = new ArrayList<>();
    private List<Treino> treinos = new ArrayList<>();
    private List<Equipamento> equipamentos = new ArrayList<>();
    private List<Instrutor> instrutores = new ArrayList<>();
    private FileManager fileManager = new FileManager();

    public void adicionarAluno(Aluno aluno) {
        alunos.add(aluno);
        fileManager.registrarOperacao("Aluno adicionado: " + aluno.getNome(), "log_alunos.txt");
    }

    public void adicionarTreino(Treino treino) {
        treinos.add(treino);
        fileManager.registrarOperacao("Treino adicionado: " + treino.getNome(), "log_treinos.txt");
    }

    public void adicionarEquipamento(Equipamento equipamento) {
        equipamentos.add(equipamento);
        fileManager.registrarOperacao("Equipamento adicionado: " + equipamento.getNome(), "log_equipamentos.txt");
    }

    public void adicionarInstrutor(Instrutor instrutor) {
        instrutores.add(instrutor);
        fileManager.registrarOperacao("Instrutor adicionado: " + instrutor.getNome(), "log_instrutores.txt");
    }

    public void removerAluno(int id) {
        Aluno aluno = pesquisarAluno(id);
        if (aluno != null) {
            alunos.remove(aluno);
            fileManager.registrarOperacao("Aluno removido: " + aluno.getNome(), "log_alunos.txt");
        } else {
            System.out.println("Aluno não encontrado.");
        }
    }

    public void removerTreino(String nome) {
        Treino treino = pesquisarTreino(nome);
        if (treino != null) {
            treinos.remove(treino);
            fileManager.registrarOperacao("Treino removido: " + treino.getNome(), "log_treinos.txt");
        } else {
            System.out.println("Treino não encontrado.");
        }
    }

    public void removerEquipamento(int id) {
        Equipamento equipamento = pesquisarEquipamento(id);
        if (equipamento != null) {
            equipamentos.remove(equipamento);
            fileManager.registrarOperacao("Equipamento removido: " + equipamento.getNome(), "log_equipamentos.txt");
        } else {
            System.out.println("Equipamento não encontrado.");
        }
    }

    public void removerInstrutor(int id) {
        Instrutor instrutor = pesquisarInstrutor(id);
        if (instrutor != null) {
            instrutores.remove(instrutor);
            fileManager.registrarOperacao("Instrutor removido: " + instrutor.getNome(), "log_instrutores.txt");
        } else {
            System.out.println("Instrutor não encontrado.");
        }
    }

    public List<Aluno> listarAlunos() {
        return new ArrayList<>(alunos);
    }

    public List<Treino> listarTreinos() {
        return new ArrayList<>(treinos);
    }

    public List<Equipamento> listarEquipamentos() {
        return new ArrayList<>(equipamentos);
    }

    public List<Instrutor> listarInstrutores() {
        return new ArrayList<>(instrutores);
    }

    public Aluno pesquisarAluno(int id) {
        for (Aluno aluno : alunos) {
            if (aluno.getId() == id) {
                return aluno;
            }
        }
        return null;
    }

    public Treino pesquisarTreino(String nome) {
        for (Treino treino : treinos) {
            if (treino.getNome().equalsIgnoreCase(nome)) {
                return treino;
            }
        }
        return null;
    }

    public Equipamento pesquisarEquipamento(int id) {
        for (Equipamento equipamento : equipamentos) {
            if (equipamento.getId() == id) {
                return equipamento;
            }
        }
        return null;
    }

    public Instrutor pesquisarInstrutor(int id) {
        for (Instrutor instrutor : instrutores) {
            if (instrutor.getId() == id) {
                return instrutor;
            }
        }
        return null;
    }

    public void agendarTreino(int idAluno, String nomeTreino, Date data, int idInstrutor) {
        Aluno aluno = pesquisarAluno(idAluno);
        Treino treino = pesquisarTreino(nomeTreino);
        Instrutor instrutor = pesquisarInstrutor(idInstrutor);
        if (aluno != null && treino != null && instrutor != null) {
            if (data.after(new Date())) {
                aluno.adicionarTreino(new AgendamentoTreino(aluno, treino, data, instrutor));
                fileManager.registrarOperacao("Treino agendado para o aluno: " + aluno.getNome() + " - " + treino.getNome() + " - " + data + " - Instrutor: " + instrutor.getNome(), "log_agendamentos.txt");
                System.out.println("Treino agendado com sucesso para o aluno: " + aluno.getNome());
            } else {
                System.out.println("Data inválida. O treino deve ser agendado para o futuro.");
            }
        } else {
            System.out.println("Aluno, treino ou instrutor não encontrado.");
        }
    }

    public void reservarEquipamento(int idAluno, int idEquipamento, Date data) {
        Aluno aluno = pesquisarAluno(idAluno);
        Equipamento equipamento = pesquisarEquipamento(idEquipamento);
        if (aluno != null && equipamento != null) {
            aluno.adicionarEquipamento(new AgendamentoEquipamento(aluno, equipamento, data));
            fileManager.registrarOperacao("Equipamento reservado para o aluno: " + aluno.getNome() + " - " + equipamento.getNome() + " - " + data, "log_reservas_equipamentos.txt");
            System.out.println("Equipamento reservado com sucesso para o aluno: " + aluno.getNome());
        } else {
            System.out.println("Aluno ou equipamento não encontrado.");
        }
    }

    public void verificarHistorico(int idAluno) {
        Aluno aluno = pesquisarAluno(idAluno);
        if (aluno != null) {
            System.out.println("Histórico de treinos do aluno " + aluno.getNome() + ":");
            for (AgendamentoTreino treino : aluno.getHistoricoTreinos()) {
                System.out.println(treino);
            }
            System.out.println("Histórico de equipamentos reservados pelo aluno " + aluno.getNome() + ":");
            for (AgendamentoEquipamento equipamento : aluno.getHistoricoEquipamentos()) {
                System.out.println(equipamento);
            }
        } else {
            System.out.println("Aluno não encontrado.");
        }
    }

    public FileManager getFileManager() {
        return fileManager;
    }

    public void salvarEFechar() {
        // Implementar lógica para salvar os dados e fechar o programa
        // Por exemplo, salvar os dados em arquivos serializados
    }
}

public class Main {
    public static void main(String[] args) {
        SistemaAcademia academia = new SistemaAcademia();
        academia.adicionarTreino(new Treino("Tríceps e bíceps", "Trabalho focado nos músculos do tríceps e bíceps."));
        academia.adicionarTreino(new Treino("Ombros e trapézio", "Treino voltado para os músculos dos ombros e trapézio."));
        academia.adicionarTreino(new Treino("Treino completo de pernas (todos os grupos musculares)", "Treino abrangente para todos os grupos musculares das pernas."));
        academia.adicionarTreino(new Treino("Costas", "Trabalho específico nos músculos das costas."));
        academia.adicionarTreino(new Treino("Peitoral", "Foco no desenvolvimento dos músculos do peitoral."));

        Scanner scanner = new Scanner(System.in);
        int opcao;
        do {
            System.out.println("\nSelecione uma opção:");
            System.out.println("1. Alunos");
            System.out.println("2. Treinos");
            System.out.println("3. Equipamentos");
            System.out.println("4. Instrutores");
            System.out.println("5. Sair");
            System.out.print("Opção: ");
            opcao = scanner.nextInt();
            switch (opcao) {
                case 1:
                    menuAluno(academia, scanner);
                    break;
                case 2:
                    menuTreino(academia, scanner);
                    break;
                case 3:
                    menuEquipamento(academia, scanner);
                    break;
                case 4:
                    menuInstrutor(academia, scanner);
                    break;
                case 5:
                    academia.salvarEFechar();
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }
        } while (opcao != 5);
    }

    public static void menuAluno(SistemaAcademia academia, Scanner scanner) {
        int opcao;
        do {
            System.out.println("\nMenu Aluno:");
            System.out.println("1. Adicionar Aluno");
            System.out.println("2. Remover Aluno");
            System.out.println("3. Listar Alunos");
            System.out.println("4. Pesquisar Aluno");
            System.out.println("5. Voltar");
            System.out.print("Opção: ");
            opcao = scanner.nextInt();
            switch (opcao) {
                case 1:
                    adicionarAluno(academia, scanner);
                    break;
                case 2:
                    removerAluno(academia, scanner);
                    break;
                case 3:
                    listarAlunos(academia);
                    break;
                case 4:
                    pesquisarAluno(academia, scanner);
                    break;
                case 5:
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }
        } while (opcao != 5);
    }

    public static void adicionarAluno(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o nome do aluno: ");
        String nome = scanner.next();
        System.out.print("Digite o ID do aluno: ");
        int id = scanner.nextInt();
        academia.adicionarAluno(new Aluno(nome, id));
    }

    public static void removerAluno(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o ID do aluno que deseja remover: ");
        int id = scanner.nextInt();
        academia.removerAluno(id);
    }

    public static void listarAlunos(SistemaAcademia academia) {
        List<Aluno> alunos = academia.listarAlunos();
        if (alunos.isEmpty()) {
            System.out.println("Nenhum aluno cadastrado.");
        } else {
            System.out.println("Lista de Alunos:");
            for (Aluno aluno : alunos) {
                System.out.println(aluno);
            }
        }
    }

    public static void pesquisarAluno(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o ID do aluno que deseja pesquisar: ");
        int id = scanner.nextInt();
        Aluno aluno = academia.pesquisarAluno(id);
        if (aluno != null) {
            System.out.println("Aluno encontrado: " + aluno);
        } else {
            System.out.println("Aluno não encontrado.");
        }
    }

    public static void menuTreino(SistemaAcademia academia, Scanner scanner) {
        int opcao;
        do {
            System.out.println("\nMenu Treino:");
            System.out.println("1. Adicionar Treino");
            System.out.println("2. Remover Treino");
            System.out.println("3. Listar Treinos");
            System.out.println("4. Pesquisar Treino");
            System.out.println("5. Voltar");
            System.out.print("Opção: ");
            opcao = scanner.nextInt();
            switch (opcao) {
                case 1:
                    adicionarTreino(academia, scanner);
                    break;
                case 2:
                    removerTreino(academia, scanner);
                    break;
                case 3:
                    listarTreinos(academia);
                    break;
                case 4:
                    pesquisarTreino(academia, scanner);
                    break;
                case 5:
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }
        } while (opcao != 5);
    }

    public static void adicionarTreino(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o nome do treino: ");
        String nome = scanner.next();
        System.out.print("Digite a descrição do treino: ");
        String descricao = scanner.next();
        academia.adicionarTreino(new Treino(nome, descricao));
    }

    public static void removerTreino(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o nome do treino que deseja remover: ");
        String nome = scanner.next();
        academia.removerTreino(nome);
    }

    public static void listarTreinos(SistemaAcademia academia) {
        List<Treino> treinos = academia.listarTreinos();
        if (treinos.isEmpty()) {
            System.out.println("Nenhum treino cadastrado.");
        } else {
            System.out.println("Lista de Treinos:");
            for (Treino treino : treinos) {
                System.out.println(treino);
            }
        }
    }

    public static void pesquisarTreino(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o nome do treino que deseja pesquisar: ");
        String nome = scanner.next();
        Treino treino = academia.pesquisarTreino(nome);
        if (treino != null) {
            System.out.println("Treino encontrado: " + treino);
        } else {
            System.out.println("Treino não encontrado.");
        }
    }

    public static void menuEquipamento(SistemaAcademia academia, Scanner scanner) {
        int opcao;
        do {
            System.out.println("\nMenu Equipamento:");
            System.out.println("1. Adicionar Equipamento");
            System.out.println("2. Remover Equipamento");
            System.out.println("3. Listar Equipamentos");
            System.out.println("4. Pesquisar Equipamento");
            System.out.println("5. Voltar");
            System.out.print("Opção: ");
            opcao = scanner.nextInt();
            switch (opcao) {
                case 1:
                    adicionarEquipamento(academia, scanner);
                    break;
                case 2:
                    removerEquipamento(academia, scanner);
                    break;
                case 3:
                    listarEquipamentos(academia);
                    break;
                case 4:
                    pesquisarEquipamento(academia, scanner);
                    break;
                case 5:
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }
        } while (opcao != 5);
    }

    public static void adicionarEquipamento(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o nome do equipamento: ");
        String nome = scanner.next();
        System.out.print("Digite o ID do equipamento: ");
        int id = scanner.nextInt();
        academia.adicionarEquipamento(new Equipamento(nome, id));
    }

    public static void removerEquipamento(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o ID do equipamento que deseja remover: ");
        int id = scanner.nextInt();
        academia.removerEquipamento(id);
    }

    public static void listarEquipamentos(SistemaAcademia academia) {
        List<Equipamento> equipamentos = academia.listarEquipamentos();
        if (equipamentos.isEmpty()) {
            System.out.println("Nenhum equipamento cadastrado.");
        } else {
            System.out.println("Lista de Equipamentos:");
            for (Equipamento equipamento : equipamentos) {
                System.out.println(equipamento);
            }
        }
    }

    public static void pesquisarEquipamento(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o ID do equipamento que deseja pesquisar: ");
        int id = scanner.nextInt();
        Equipamento equipamento = academia.pesquisarEquipamento(id);
        if (equipamento != null) {
            System.out.println("Equipamento encontrado: " + equipamento);
        } else {
            System.out.println("Equipamento não encontrado.");
        }
    }

    public static void menuInstrutor(SistemaAcademia academia, Scanner scanner) {
        int opcao;
        do {
            System.out.println("\nMenu Instrutor:");
            System.out.println("1. Adicionar Instrutor");
            System.out.println("2. Remover Instrutor");
            System.out.println("3. Listar Instrutores");
            System.out.println("4. Pesquisar Instrutor");
            System.out.println("5. Voltar");
            System.out.print("Opção: ");
            opcao = scanner.nextInt();
            switch (opcao) {
                case 1:
                    adicionarInstrutor(academia, scanner);
                    break;
                case 2:
                    removerInstrutor(academia, scanner);
                    break;
                case 3:
                    listarInstrutores(academia);
                    break;
                case 4:
                    pesquisarInstrutor(academia, scanner);
                    break;
                case 5:
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }
        } while (opcao != 5);
    }

    public static void adicionarInstrutor(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o nome do instrutor: ");
        String nome = scanner.next();
        System.out.print("Digite o ID do instrutor: ");
        int id = scanner.nextInt();
        academia.adicionarInstrutor(new Instrutor(nome, id));
    }

    public static void removerInstrutor(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o ID do instrutor que deseja remover: ");
        int id = scanner.nextInt();
        academia.removerInstrutor(id);
    }

    public static void listarInstrutores(SistemaAcademia academia) {
        List<Instrutor> instrutores = academia.listarInstrutores();
        if (instrutores.isEmpty()) {
            System.out.println("Nenhum instrutor cadastrado.");
        } else {
            System.out.println("Lista de Instrutores:");
            for (Instrutor instrutor : instrutores) {
                System.out.println(instrutor);
            }
        }
    }

    public static void pesquisarInstrutor(SistemaAcademia academia, Scanner scanner) {
        System.out.print("Digite o ID do instrutor que deseja pesquisar: ");
        int id = scanner.nextInt();
        Instrutor instrutor = academia.pesquisarInstrutor(id);
        if (instrutor != null) {
            System.out.println("Instrutor encontrado: " + instrutor);
        } else {
            System.out.println("Instrutor não encontrado.");
        }
    }
}
